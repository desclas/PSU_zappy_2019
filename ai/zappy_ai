#!/usr/bin/env python3

from ctypes import *
import random
import argparse
import time

def have_path(index):
	x = 1
	y = 0
	z = 2
	string = ""
	
	while x < index:
		x += z
		y += 1
		if index <= x + (z / 2) and index >= x:
			break
		z += 2
	string = string + ("Forward," * y)
	index -= x
	if index < 0:
		string = string + "Left," + ("Forward," * abs(index))
	elif index > 0:
		string = string + "Right," + ("Forward," * index)
	return string

def get_inventory(invv):
	invv = invv.replace("[","")
	invv = invv.replace("]","")
	invv = invv.replace(",","")
	invv = invv.split(" ")
	for x in invv:
		if x is '':
			invv.remove(x)
	for x in range(0, len(invv), 2):
		inv[invv[x]] = invv[x + 1]

def inventory():
	exec(sleep)
	index = srvlib.epoll_wait_it(srv)
	if index is 0:
		exit(84)
	if srvlib.epoll_write(srv, b"Inventory") is 0:
		exit(84)
	exec(sleep)
	index = srvlib.epoll_wait_it(srv)
	sk = ""
	while True:
		string = srvlib.epoll_read(srv)
		sk += string.decode("utf-8")
		if "dead" in sk:
			exit(0)
		if "]" in sk:
			string = sk.encode("utf-8")
			break
	get_inventory(string.decode("utf-8"))

def take_all(sf):
	sf = sf.split(" ")
	for x in sf:
		if x is '':
			sf.remove(x)
	for x in sf:
		if "player" not in x:
			exec(sleep)
			index = srvlib.epoll_wait_it(srv)
			if index is 0:
				exit(84)
			ft = "Take " + x
			if srvlib.epoll_write(srv, ft.encode("utf-8")) is 0:
				exit(84)
			exec(sleep)
			index = srvlib.epoll_wait_it(srv)
			string = srvlib.epoll_read(srv)
			if "dead" in string.decode("utf-8"):
				exit(0)
			if "ok" in string.decode("utf-8"):
				inv[x] = str(int(inv[x]) + 1)

def get_index(st, what):
	st = st.replace("[ ","")
	st = st.replace(" ]","")
	st = st.split(",")
	last = 0;
	index = -1;
	for x in range(0, len(st)):
		count = 0
		if st[x] is not '':
			for k in st[x].split(" "):
				if what in k:
					count += 1
		if count > last:
			index = x
			last = count
	take_all(st[0])
	return index

def go_to_path(path):
	path = path.split(",")
	for x in path:
		if x is '':
			path.remove(x)
	for x in path:
		exec(sleep)
		index = srvlib.epoll_wait_it(srv)
		if index is 0:
			exit(84)
		if srvlib.epoll_write(srv, x.encode("utf-8")) is 0:
			exit(84)
		exec(sleep)
		index = srvlib.epoll_wait_it(srv)
		string = srvlib.epoll_read(srv)
		if "dead" in string.decode("utf-8"):
			exit(0)

def take_it():
	exec(sleep)
	index = srvlib.epoll_wait_it(srv)
	if index is 0:
		exit(84)
	if srvlib.epoll_write(srv, b"Look") is 0:
		exit(84)
	exec(sleep)
	index = srvlib.epoll_wait_it(srv)
	sk = ""
	while True:
		string = srvlib.epoll_read(srv)
		sk += string.decode("utf-8")
		if "dead" in sk:
			exit(0)
		if "]" in sk:
			string = sk.encode("utf-8")
			break
	st = string.decode("utf-8")
	st = st.replace("[ ","")
	st = st.replace(" ]","")
	st = st.split(",")
	for x in st:
		if x is '':
			st.remove(x)
	take_all(st[0])

def search_something(something):
	exec(sleep)
	index = srvlib.epoll_wait_it(srv)
	if index is 0:
		exit(84)
	if srvlib.epoll_write(srv, b"Look") is 0:
		exit(84)
	exec(sleep)
	index = srvlib.epoll_wait_it(srv)
	sk = ""
	while True:
		string = srvlib.epoll_read(srv)
		sk += string.decode("utf-8")
		if "dead" in sk:
			exit(0)
		if "]" in sk:
			break
	idk = get_index(string.decode("utf-8"), something)
	path = ""
	if idk is not -1:
		path = have_path(index + 1)
	else:
		cho = random.randrange(100)
		cho %= 4
		if cho is 0:
			path = "Forward,"
		elif cho is 1:
			path = "Left,Forward,"
		elif cho is 2:
			path = "Right,Forward,"
		else:
			path = "Left,Left,Forward,"
	go_to_path(path)
	take_it()

def what_need():
	if lvl > 7:
		return ""
	for x in inc[lvl]:
		if x is not "player":
			if int(inc[lvl][x]) > int(inv[x]):
				return x
	return ""

def incant():
	exec(sleep)
	index = srvlib.epoll_wait_it(srv)
	if index is 0:
		exit(84)
	if srvlib.epoll_write(srv, b"Incantation") is 0:
		exit(84)
	exec(sleep)
	index = srvlib.epoll_wait_it(srv)
	string = srvlib.epoll_read(srv)
	if "dead" in string.decode("utf-8"):
		exit(0)
	if "level" in string.decode("utf-8"):
		lvl += 1
	elif "ko" in string.decode("utf-8"):
		exec(sleep)
		index = srvlib.epoll_wait_it(srv)
		if index is 0:
			exit(84)
		if srvlib.epoll_write(srv, b"Look") is 0:
			exit(84)
		exec(sleep)
		index = srvlib.epoll_wait_it(srv)
		sk = ""
		while True:
			string = srvlib.epoll_read(srv)
			sk += string.decode("utf-8")
			if "dead" in sk:
				exit(0)
			if "]" in sk:
				break
	else:
		sk = ""
		while True:
			string = srvlib.epoll_read(srv)
			sk += string.decode("utf-8")
			if "dead" in sk:
				exit(0)
			if "level" in sk:
				break
		lvl += 1

def auto_run():
	while True:
		if int(inv["food"]) < 10:
			search_something("food")
		elif need is not "":
			search_something(need)
		else:
			incant()
		need = what_need()
		inventory()

sleep = "time.sleep(0.00000000001)"
pars = argparse.ArgumentParser(add_help=False)
pars.add_argument("-p", type=int, default=4242, help="is the port number")
pars.add_argument("-n", type=str, default="Team1", help="is the name of the team")
pars.add_argument("-h", type=str, default="localhost", help="is the name of the machine; localhost by default")
ag = pars.parse_args()
srvlib = CDLL("./AI/lib/libzappy.so")
srv = srvlib.connection_to_server(c_int(ag.p))
index = srvlib.epoll_wait_it(srv)
srvlib.epoll_write.argtypes = [c_void_p, c_char_p]
srvlib.epoll_read.restype = c_char_p
string = c_char_p
lvl = 1
con = False
if srvlib.check_acess(c_int(index), srv, srvlib.get_epoll_st(c_bool(False))) is 1:
	srvlib.epoll_write(srv, c_char_p(ag.n.encode("utf-8")))
	exec(sleep)
	index = srvlib.epoll_wait_it(srv)
	if srvlib.check_acess(c_int(index), srv, srvlib.get_epoll_st(c_bool(True))) is 1:
		string = srvlib.epoll_read(srv)
		con = True
if con is False:
	exit(84)
inc = [ { "player":"1", "linemate":"1", "deraumere":"0", "sibur":"0", "mendiane":"0", "phiras":"0", "thystame":"0" },
	{ "player":"2", "linemate":"1", "deraumere":"1", "sibur":"1", "mendiane":"0", "phiras":"0", "thystame":"0" },
	{ "player":"2", "linemate":"2", "deraumere":"0", "sibur":"1", "mendiane":"0", "phiras":"2", "thystame":"0" },
	{ "player":"4", "linemate":"1", "deraumere":"1", "sibur":"2", "mendiane":"0", "phiras":"1", "thystame":"0" },
	{ "player":"4", "linemate":"1", "deraumere":"2", "sibur":"1", "mendiane":"3", "phiras":"0", "thystame":"0" },
	{ "player":"6", "linemate":"1", "deraumere":"2", "sibur":"3", "mendiane":"0", "phiras":"1", "thystame":"0" },
	{ "player":"6", "linemate":"2", "deraumere":"2", "sibur":"2", "mendiane":"2", "phiras":"2", "thystame":"1" } ]
inv = { "food":"0", "linemate":"0", "deraumere":"0", "sibur":"0", "mendiane":"0", "phiras":"0", "thystame":"0" }
inventory()
auto_run()
srvlib.destruct(srv)
